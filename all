BFS


#include <stdio.h>
#include <stdlib.h>

#define MAX 100

int queue[MAX], front = -1, rear = -1;
int visited[MAX], adj[MAX][MAX];

void enqueue(int v) {
    if (rear == MAX - 1) return;
    if (front == -1) front = 0;
    queue[++rear] = v;
}

int dequeue() {
    if (front == -1 || front > rear) return -1;
    return queue[front++];
}

void bfs(int start, int n) {
    int i, v;
    enqueue(start);
    visited[start] = 1;

    while (front <= rear) {
        v = dequeue();
        printf("%d ", v);

        for (i = 0; i < n; i++) {
            if (adj[v][i] == 1 && !visited[i]) {
                enqueue(i);
                visited[i] = 1;
            }
        }
    }
}

int main() {
    int n, e, i, u, v, start;

    printf("Enter number of vertices: ");
    scanf("%d", &n);

    printf("Enter number of edges: ");
    scanf("%d", &e);

    for (i = 0; i < e; i++) {
        printf("Enter edge (u v): ");
        scanf("%d%d", &u, &v);
        adj[u][v] = 1;
        adj[v][u] = 1; // For undirected graph
    }

    printf("Enter starting vertex: ");
    scanf("%d", &start);

    bfs(start, n);

    return 0;
}

































DFS





#include <stdio.h>

#define MAX 100

int visited[MAX], adj[MAX][MAX];

void dfs(int v, int n) {
    visited[v] = 1;
    printf("%d ", v);

    for (int i = 0; i < n; i++) {
        if (adj[v][i] == 1 && !visited[i]) {
            dfs(i, n);
        }
    }
}

int main() {
    int n, e, u, v, start;

    printf("Enter number of vertices: ");
    scanf("%d", &n);

    printf("Enter number of edges: ");
    scanf("%d", &e);

    for (int i = 0; i < e; i++) {
        printf("Enter edge (u v): ");
        scanf("%d %d", &u, &v);
        adj[u][v] = 1;
        adj[v][u] = 1; // For undirected graph
    }

    printf("Enter starting vertex: ");
    scanf("%d", &start);

    printf("DFS Traversal starting from vertex %d: ", start);
    dfs(start, n);

    return 0;
}












SCC



#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int **edges;
    int V;
} Graph;

// Function to create a graph
Graph* createGraph(int V) {
    Graph* graph = (Graph*) malloc(sizeof(Graph));
    graph->V = V;
    graph->edges = (int**) malloc((V + 1) * sizeof(int*));
    for (int i = 0; i <= V; i++) {
        graph->edges[i] = (int*) calloc(V + 1, sizeof(int));
    }
    return graph;
}

// Function to add an edge to the graph
void addEdge(Graph* graph, int u, int v) {
    graph->edges[u][v] = 1;
}

// DFS function to reach destination
int dfs(int curr, int des, Graph* graph, int* vis) {
    if (curr == des) {
        return 1;
    }
    vis[curr] = 1;
    for (int i = 1; i <= graph->V; i++) {
        if (graph->edges[curr][i] && !vis[i]) {
            if (dfs(i, des, graph, vis)) {
                return 1;
            }
        }
    }
    return 0;
}

// To tell whether there is path from source to destination
int isPath(int src, int des, Graph* graph) {
    int* vis = (int*) calloc(graph->V + 1, sizeof(int));
    int result = dfs(src, des, graph, vis);
    free(vis);
    return result;
}

// Function to return all the strongly connected components of a graph
int** findSCC(int n, Graph* graph, int* componentSizes, int* numComponents) {
    int** components = (int**) malloc(n * sizeof(int*));
    *numComponents = 0;

    int* is_scc = (int*) calloc(n + 1, sizeof(int));

    for (int i = 1; i <= n; i++) {
        if (!is_scc[i]) {
            components[*numComponents] = (int*) malloc(n * sizeof(int));
            int count = 0;

            components[*numComponents][count++] = i;

            for (int j = i + 1; j <= n; j++) {
                if (!is_scc[j] && isPath(i, j, graph) && isPath(j, i, graph)) {
                    is_scc[j] = 1;
                    components[*numComponents][count++] = j;
                }
            }

            componentSizes[*numComponents] = count;
            (*numComponents)++;
        }
    }

    free(is_scc);
    return components;
}

// Driver code
int main() {
    int V, E;
    printf("Enter the number of vertices: ");
    scanf("%d", &V);
    printf("Enter the number of edges: ");
    scanf("%d", &E);

    Graph* graph = createGraph(V);

    printf("Enter the edges (u v) one by one:\n");
    for (int i = 0; i < E; i++) {
        int u, v;
        scanf("%d %d", &u, &v);
        addEdge(graph, u, v);
    }

    int componentSizes[V];
    int numComponents;
    int** components = findSCC(V, graph, componentSizes, &numComponents);

    printf("Strongly Connected Components are:\n");
    for (int i = 0; i < numComponents; i++) {
        for (int j = 0; j < componentSizes[i]; j++) {
            printf("%d ", components[i][j]);
        }
        printf("\n");
        free(components[i]);
    }

    free(components);
    for (int i = 0; i <= V; i++) {
        free(graph->edges[i]);
    }
    free(graph->edges);
    free(graph);

    return 0;
}
















ARTICULATON POINT

#include <stdio.h>
#include <stdlib.h>

// A recursive function to traverse the graph without
// considering the ith vertex and its associated edges
void dfs(int **adj, int V, int *vis, int i, int curr) {
    vis[curr] = 1;
    for (int j = 1; j <= V; j++) {
        if (adj[curr][j] == 1 && j != i) {
            if (!vis[j]) {
                dfs(adj, V, vis, i, j);
            }
        }
    }
}

// Function to find Articulation Points in the graph
void AP(int **adj, int V) {
    // Iterating over all the vertices and for each vertex i
    // remove the vertex and check whether the graph remains
    // connected.
    for (int i = 1; i <= V; i++) {
        // To keep track of number of components of graph
        int components = 0;

        // To keep track of visited vertices
        int *vis = (int *)calloc(V + 1, sizeof(int));

        // Iterating over the graph after removing vertex i
        // and its associated edges
        for (int j = 1; j <= V; j++) {
            if (j != i && !vis[j]) {
                // If the jth vertex is not visited it will
                // form a new component.
                components++;

                // dfs call for the jth vertex
                dfs(adj, V, vis, i, j);
            }
        }

        // If number of components is more than 1 after
        // removing the ith vertex then vertex i is an
        // articulation point.
        if (components > 1) {
            printf("%d\n", i);
        }

        // Freeing the memory allocated for vis
        free(vis);
    }
}

// Utility function to add an edge
void addEdge(int **adj, int u, int v) {
    adj[u][v] = 1;
    adj[v][u] = 1;
}

// Driver Code
int main() {
    // Create graphs given in above diagrams
    printf("Enter the number of vertices: ");
    int V;
    scanf("%d", &V);

    // Allocating memory for adjacency matrix
    int **adj = (int **)malloc((V + 1) * sizeof(int *));
    for (int i = 0; i <= V; i++) {
        adj[i] = (int *)calloc(V + 1, sizeof(int));
    }

    printf("Enter the number of edges: ");
    int E;
    scanf("%d", &E);

    printf("Enter the edges (u v) one by one:\n");
    for (int i = 0; i < E; i++) {
        int u, v;
        scanf("%d %d", &u, &v);
        addEdge(adj, u, v);
    }

    printf("Articulation points in the graph \n");
    AP(adj, V);

    // Freeing the memory allocated for adjacency matrix
    for (int i = 0; i <= V; i++) {
        free(adj[i]);
    }
    free(adj);

    return 0;
}









DijKastra--0

#include <limits.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>

// A utility function to find the vertex with minimum
// distance value, from the set of vertices not yet included
// in the shortest path tree
int minDistance(int *dist, bool *sptSet, int V) {
    // Initialize min value
    int min = INT_MAX, min_index;

    for (int v = 0; v < V; v++) {
        if (!sptSet[v] && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
    }

    return min_index;
}

// A utility function to print the constructed distance
// array and total cost
void printSolution(int *dist, int V) {
    int totalCost = 0;  // Variable to calculate the total cost

    printf("Vertex \t\t Distance from Source\n");
    for (int i = 0; i < V; i++) {
        printf("%d \t\t\t %d\n", i, dist[i]);
        if (dist[i] != INT_MAX) {  // Ignore infinite distances
            totalCost += dist[i];
        }
    }

    printf("\nTotal Cost of shortest paths from source: %d\n", totalCost);
}

// Function that implements Dijkstra's single source
// shortest path algorithm for a graph represented using
// adjacency matrix representation
void dijkstra(int **graph, int src, int V) {
    int *dist = (int *)malloc(V * sizeof(int)); // The output array. dist[i] will hold the shortest distance from src to i

    bool *sptSet = (bool *)malloc(V * sizeof(bool)); // sptSet[i] will be true if vertex i is included in shortest path tree or shortest distance from src to i is finalized

    // Initialize all distances as INFINITE and sptSet[] as false
    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
        sptSet[i] = false;
    }

    // Distance of source vertex from itself is always 0
    dist[src] = 0;

    // Find shortest path for all vertices
    for (int count = 0; count < V - 1; count++) {
        // Pick the minimum distance vertex from the set of vertices not yet processed
        int u = minDistance(dist, sptSet, V);

        // Mark the picked vertex as processed
        sptSet[u] = true;

        // Update dist value of the adjacent vertices of the picked vertex
        for (int v = 0; v < V; v++) {
            // Update dist[v] only if is not in sptSet, there is an edge from u to v, and total weight of path from src to v through u is smaller than current value of dist[v]
            if (!sptSet[v] && graph[u][v] != 0 && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    // Print the constructed distance array and the total cost
    printSolution(dist, V);

    // Free allocated memory
    free(dist);
    free(sptSet);
}

// Driver's code
int main() {
    int V, E;
    printf("Enter the number of vertices: ");
    scanf("%d", &V);
    printf("Enter the number of edges: ");
    scanf("%d", &E);

    // Dynamically allocate memory for the adjacency matrix
    int **graph = (int **)malloc(V * sizeof(int *));
    for (int i = 0; i < V; i++) {
        graph[i] = (int *)calloc(V, sizeof(int)); // Dynamically allocate each row of the adjacency matrix
    }

    printf("Enter the edges (u v w) one by one:\n");
    for (int i = 0; i < E; i++) {
        int u, v, w;
        scanf("%d %d %d", &u, &v, &w);
        graph[u][v] = w;  // Store weight of edge u->v
        graph[v][u] = w;  // Since the graph is undirected
    }

    int src;
    printf("Enter the source vertex: ");
    scanf("%d", &src);

    dijkstra(graph, src, V);

    // Free the dynamically allocated memory for the adjacency matrix
    for (int i = 0; i < V; i++) {
        free(graph[i]);
    }
    free(graph);

    return 0;
}






0/1 NAPSHAKE


#include <stdio.h>

// Function to get the maximum of two integers
int max(int a, int b) {
    return (a > b) ? a : b;
}

// Function to solve the knapsack problem
int knapsack(int M, int wt[], int pr[], int n) {
    int i, w;
    int knap[n + 1][M + 1];

    // Initialize the knap array
    for (i = 0; i <= n; i++) {
        for (w = 0; w <= M; w++) {
            if (i == 0 || w == 0) {
                knap[i][w] = 0;
            } else if (wt[i - 1] <= w) {
                knap[i][w] = max(pr[i - 1] + knap[i - 1][w - wt[i - 1]], knap[i - 1][w]);
            } else {
                knap[i][w] = knap[i - 1][w];
            }
        }
    }
    return knap[n][M];
}

int main() {
    int M, n, pr[100], wt[100];

    // Input number of objects
    printf("Enter the number of objects: ");
    scanf("%d", &n);

    // Input weight of the knapsack
    printf("Enter the weight of knapsack: ");
    scanf("%d", &M);

    // Input weights of the objects
    printf("Enter the weights: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &wt[i]);
    }

    // Input profits of the objects
    printf("Enter the profits: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &pr[i]);
    }

    // Output the result
    printf("Answer is: %d\n", knapsack(M, wt, pr, n));

    return 0;
}









Kruskal--0



#include <stdio.h>
#include <stdlib.h>

// Comparator function to use in sorting
int comparator(const void* p1, const void* p2) {
    const int(*x)[3] = p1;
    const int(*y)[3] = p2;

    return (*x)[2] - (*y)[2];
}

// Initialization of parent[] and rank[] arrays
void makeSet(int parent[], int rank[], int n) {
    for (int i = 0; i < n; i++) {
        parent[i] = i;
        rank[i] = 0;
    }
}

// Function to find the parent of a node
int findParent(int parent[], int component) {
    if (parent[component] == component)
        return component;

    return parent[component] = findParent(parent, parent[component]);
}

// Function to unite two sets
void unionSet(int u, int v, int parent[], int rank[]) {
    // Finding the parents
    u = findParent(parent, u);
    v = findParent(parent, v);

    if (rank[u] < rank[v]) {
        parent[u] = v;
    } else if (rank[u] > rank[v]) {
        parent[v] = u;
    } else {
        parent[v] = u;

        // Since the rank increases if
        // the ranks of two sets are same
        rank[u]++;
    }
}

// Function to find the MST
void kruskalAlgo(int n, int edge[n][3], int E) {
    // First we sort the edge array in ascending order
    // so that we can access minimum distances/cost
    qsort(edge, E, sizeof(edge[0]), comparator);

    int parent[n];
    int rank[n];

    // Function to initialize parent[] and rank[]
    makeSet(parent, rank, n);

    // To store the minimum cost
    int minCost = 0;

    printf("Following are the edges in the constructed MST\n");
    for (int i = 0; i < E; i++) {
        int v1 = findParent(parent, edge[i][0]);
        int v2 = findParent(parent, edge[i][1]);
        int wt = edge[i][2];

        // If the parents are different that
        // means they are in different sets so
        // union them
        if (v1 != v2) {
            unionSet(v1, v2, parent, rank);
            minCost += wt;
            printf("%d -- %d == %d\n", edge[i][0], edge[i][1], wt);
        }
    }

    printf("Minimum Cost Spanning Tree: %d\n", minCost);
}

// Driver code
int main() {
    int V, E;
    printf("Enter number of vertices: ");
    scanf("%d", &V);
    printf("Enter number of edges: ");
    scanf("%d", &E);

    int (*edge)[3] = malloc(E * sizeof *edge);

    printf("Enter edges (source destination weight):\n");
    for (int i = 0; i < E; i++) {
        scanf("%d %d %d", &edge[i][0], &edge[i][1], &edge[i][2]);
    }

    kruskalAlgo(V, edge, E);

    // Free allocated memory
    free(edge);

    return 0;
}





primps--0


#include <limits.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>

// A utility function to find the vertex with
// minimum key value, from the set of vertices
// not yet included in MST
int minKey(int key[], bool mstSet[], int V)
{
    // Initialize min value
    int min = INT_MAX, min_index;

    for (int v = 0; v < V; v++)
        if (mstSet[v] == false && key[v] < min)
            min = key[v], min_index = v;

    return min_index;
}

// A utility function to print the
// constructed MST stored in parent[]
void printMST(int parent[], int V, int** graph)
{
    printf("Edge \tWeight\n");
    for (int i = 1; i < V; i++)
        printf("%d - %d \t%d \n", parent[i], i, graph[parent[i]][i]);
}

// Function to construct and print MST for
// a graph represented using adjacency
// matrix representation
void primMST(int** graph, int V)
{
    // Array to store constructed MST
    int* parent = (int*)malloc(V * sizeof(int));
    // Key values used to pick minimum weight edge in cut
    int* key = (int*)malloc(V * sizeof(int));
    // To represent set of vertices included in MST
    bool* mstSet = (bool*)malloc(V * sizeof(bool));

    // Initialize all keys as INFINITE
    for (int i = 0; i < V; i++)
        key[i] = INT_MAX, mstSet[i] = false;

    // Always include first 1st vertex in MST.
    // Make key 0 so that this vertex is picked as first vertex.
    key[0] = 0;
    // First node is always root of MST
    parent[0] = -1;

    // The MST will have V vertices
    for (int count = 0; count < V - 1; count++) {
        // Pick the minimum key vertex from the
        // set of vertices not yet included in MST
        int u = minKey(key, mstSet, V);

        // Add the picked vertex to the MST Set
        mstSet[u] = true;

        // Update key value and parent index of
        // the adjacent vertices of the picked vertex.
        // Consider only those vertices which are not
        // yet included in MST
        for (int v = 0; v < V; v++)
            // graph[u][v] is non zero only for adjacent
            // vertices of mstSet[v] is false for vertices
            // not yet included in MST Update the key only
            // if graph[u][v] is smaller than key[v]
            if (graph[u][v] && mstSet[v] == false && graph[u][v] < key[v])
                parent[v] = u, key[v] = graph[u][v];
    }

    // print the constructed MST
    printMST(parent, V, graph);

    // Free allocated memory
    free(parent);
    free(key);
    free(mstSet);
}

// Driver's code
int main()
{
    int V, E;
    printf("Enter number of vertices: ");
    scanf("%d", &V);
    printf("Enter number of edges: ");
    scanf("%d", &E);

    // Create a 2D array for the graph
    int** graph = (int**)malloc(V * sizeof(int*));
    for (int i = 0; i < V; i++)
        graph[i] = (int*)malloc(V * sizeof(int));

    // Initialize the graph with 0s
    for (int i = 0; i < V; i++)
        for (int j = 0; j < V; j++)
            graph[i][j] = 0;

    // Take the edges as input
    for (int i = 0; i < E; i++) {
        int u, v, w;
        printf("Enter edge (u v w): ");
        scanf("%d %d %d", &u, &v, &w);
        graph[u][v] = w;
        graph[v][u] = w;
    }

    // Print the solution
    primMST(graph, V);

    // Free allocated memory
    for (int i = 0; i < V; i++)
        free(graph[i]);
    free(graph);

    return 0;
}


